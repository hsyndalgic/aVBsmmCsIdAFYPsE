df$campaign<-factor(df$campaign)
normalize <- function(x) {
(x-min(x))/(max(x)-min(x))
}
df<-df %>%
mutate_if(is.numeric, normalize)#Standardization
summary(df$y)
glimpse(df)
profiling_num(df)
plot_num(df)
freq(df)
df_copy=df
df_balanced<-df[df$y=="yes",]
df<-rbind(df,df_balanced)
train_indeks <- createDataPartition(df$y, p = 0.8, list = FALSE, times = 1)
train <- df[train_indeks,]
test <- df[-train_indeks,]
train_x <- train %>% dplyr::select(-y)
train_y <- train$y
test_x <- test %>% dplyr::select(-y)
test_y <- test$y
training <- data.frame(train_x, y = train_y)
ctrl <- trainControl(method = "cv",
number = 5,
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
glm_tune <- train(train_x,
train_y,
method = "glm",
trControl = ctrl)
glm_tune
head(glm_tune$pred$yes)
defaultSummary(data.frame(obs = test_y,
pred = predict(glm_tune, test_x)))
#egitim
confusionMatrix(data = predict(glm_tune, train_x),
reference = train_y, positive = "yes")
confusionMatrix(data = predict(glm_tune, test_x),
reference = test_y, positive = "yes")
confusionMatrix(data = predict(glm_tune, df %>% select(-y)),
reference = df$y, positive = "yes")
glimpse(df)
profiling_num(df)
plot_num(df)
freq(df)
df<-rbind(df,df_balanced)
glimpse(df)
profiling_num(df)
plot_num(df)
freq(df)
train_indeks <- createDataPartition(df$y, p = 0.8, list = FALSE, times = 1)
train <- df[train_indeks,]
test <- df[-train_indeks,]
train_x <- train %>% dplyr::select(-y)
train_y <- train$y
test_x <- test %>% dplyr::select(-y)
test_y <- test$y
training <- data.frame(train_x, y = train_y)
ctrl <- trainControl(method = "cv",
number = 5,
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
glm_tune <- train(train_x,
train_y,
method = "glm",
trControl = ctrl)
glm_tune
head(glm_tune$pred$yes)
defaultSummary(data.frame(obs = test_y,
pred = predict(glm_tune, test_x)))
#egitim
confusionMatrix(data = predict(glm_tune, train_x),
reference = train_y, positive = "yes")
confusionMatrix(data = predict(glm_tune, test_x),
reference = test_y, positive = "yes")
confusionMatrix(data = predict(glm_tune, df %>% select(-y)),
reference = df$y, positive = "yes")
df=df_copy
glimpse(df)
profiling_num(df)
plot_num(df)
freq(df)
train_indeks <- createDataPartition(df$y, p = 0.8, list = FALSE, times = 1)
train <- df[train_indeks,]
test <- df[-train_indeks,]
train_x <- train %>% dplyr::select(-y)
train_y <- train$y
test_x <- test %>% dplyr::select(-y)
test_y <- test$y
training <- data.frame(train_x, y = train_y)
ctrl <- trainControl(method = "cv",
number = 5,
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
glm_tune <- train(train_x,
train_y,
method = "glm",
trControl = ctrl)
glm_tune
head(glm_tune$pred$yes)
defaultSummary(data.frame(obs = test_y,
pred = predict(glm_tune, test_x)))
#egitim
confusionMatrix(data = predict(glm_tune, train_x),
reference = train_y, positive = "yes")
confusionMatrix(data = predict(glm_tune, test_x),
reference = test_y, positive = "yes")
confusionMatrix(data = predict(glm_tune, df %>% select(-y)),
reference = df$y, positive = "yes")
set.seed(123)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE, # FALSE for reproducible results
)
xgb_base <- caret::train(
y~., data = train,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
df<-rbind(df,df_balanced)
set.seed(123)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE, # FALSE for reproducible results
)
xgb_base <- caret::train(
y~., data = train,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
glimpse(df)
profiling_num(df)
plot_num(df)
freq(df)
df<-rbind(df,df_balanced)
set.seed(123)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE, # FALSE for reproducible results
)
xgb_base <- caret::train(
y~., data = train,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
df=df_copy
df<-rbind(df,df_balanced)
train_indeks <- createDataPartition(df$y, p = 0.8, list = FALSE, times = 1)
train <- df[train_indeks,]
test <- df[-train_indeks,]
train_x <- train %>% dplyr::select(-y)
train_y <- train$y
test_x <- test %>% dplyr::select(-y)
test_y <- test$y
training <- data.frame(train_x, y = train_y)
set.seed(123)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE, # FALSE for reproducible results
)
xgb_base <- caret::train(
y~., data = train,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
df<-rbind(df,df_balanced)
train_indeks <- createDataPartition(df$y, p = 0.8, list = FALSE, times = 1)
train <- df[train_indeks,]
test <- df[-train_indeks,]
train_x <- train %>% dplyr::select(-y)
train_y <- train$y
test_x <- test %>% dplyr::select(-y)
test_y <- test$y
training <- data.frame(train_x, y = train_y)
set.seed(123)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE, # FALSE for reproducible results
)
xgb_base <- caret::train(
y~., data = train,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
glimpse(df)
profiling_num(df)
plot_num(df)
freq(df)
df<-rbind(df,df_balanced)
glimpse(df)
profiling_num(df)
plot_num(df)
freq(df)
train_indeks <- createDataPartition(df$y, p = 0.8, list = FALSE, times = 1)
train <- df[train_indeks,]
test <- df[-train_indeks,]
train_x <- train %>% dplyr::select(-y)
train_y <- train$y
test_x <- test %>% dplyr::select(-y)
test_y <- test$y
training <- data.frame(train_x, y = train_y)
set.seed(123)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE, # FALSE for reproducible results
)
xgb_base <- caret::train(
y~., data = train,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
confusionMatrix(factor(predict(xgb_base, train_x)), factor(train_y), positive = "yes")
df=df_copy
df<-rbind(df,df_balanced)
glimpse(df)
profiling_num(df)
plot_num(df)
freq(df)
train_indeks <- createDataPartition(df$y, p = 0.8, list = FALSE, times = 1)
train <- df[train_indeks,]
test <- df[-train_indeks,]
train_x <- train %>% dplyr::select(-y)
train_y <- train$y
test_x <- test %>% dplyr::select(-y)
test_y <- test$y
training <- data.frame(train_x, y = train_y)
set.seed(123)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE, # FALSE for reproducible results
)
xgb_base <- caret::train(
y~., data = train,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
confusionMatrix(factor(predict(xgb_base, train_x)), factor(train_y), positive = "yes")
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
df<-rbind(df,df_balanced)
glimpse(df)
profiling_num(df)
plot_num(df)
freq(df)
train_indeks <- createDataPartition(df$y, p = 0.8, list = FALSE, times = 1)
train <- df[train_indeks,]
test <- df[-train_indeks,]
train_x <- train %>% dplyr::select(-y)
train_y <- train$y
test_x <- test %>% dplyr::select(-y)
test_y <- test$y
training <- data.frame(train_x, y = train_y)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
confusionMatrix(factor(predict(xgb_base, train_x)), factor(train_y), positive = "yes")
set.seed(123)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE, # FALSE for reproducible results
)
xgb_base <- caret::train(
y~., data = train,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
confusionMatrix(factor(predict(xgb_base, train_x)), factor(train_y), positive = "yes")
df=df_copy
train_indeks <- createDataPartition(df$y, p = 0.8, list = FALSE, times = 1)
train <- df[train_indeks,]
test <- df[-train_indeks,]
train_x <- train %>% dplyr::select(-y)
train_y <- train$y
test_x <- test %>% dplyr::select(-y)
test_y <- test$y
training <- data.frame(train_x, y = train_y)
glimpse(df)
profiling_num(df)
plot_num(df)
freq(df)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
confusionMatrix(factor(predict(xgb_base, train_x)), factor(train_y), positive = "yes")
# note to start nrounds from 200, as smaller learning rates result in errors so
# big with lower starting points that they'll mess the scales
nrounds <- 1000
tune_grid <- expand.grid(
nrounds = seq(from = 200, to = nrounds, by = 50),
eta = c(0.025, 0.05, 0.1, 0.3),
max_depth = c(2, 3, 4, 5, 6),
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
tune_control <- caret::trainControl(
method = "cv", # cross-validation
number = 5, # with n folds
#index = createFolds(tr_treated$Id_clean), # fix the folds
verboseIter = FALSE, # no training log
allowParallel = TRUE # FALSE for reproducible results
)
xgb_tune <- caret::train(
y~., data = train,
trControl = tune_control,
tuneGrid = tune_grid,
method = "xgbTree",
verbose = TRUE
)
df=df_copy
df=df_copy
df<-rbind(df,df_balance,df_balanced)
df<-rbind(df,df_balanced,df_balanced)
glimpse(df)
profiling_num(df)
plot_num(df)
freq(df)
set.seed(123)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE, # FALSE for reproducible results
)
xgb_base <- caret::train(
y~., data = train,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
confusionMatrix(factor(predict(xgb_base, train_x)), factor(train_y), positive = "yes")
train_indeks <- createDataPartition(df$y, p = 0.8, list = FALSE, times = 1)
train <- df[train_indeks,]
test <- df[-train_indeks,]
train_x <- train %>% dplyr::select(-y)
train_y <- train$y
test_x <- test %>% dplyr::select(-y)
test_y <- test$y
training <- data.frame(train_x, y = train_y)
train_indeks <- createDataPartition(df$y, p = 0.8, list = FALSE, times = 1)
train <- df[train_indeks,]
test <- df[-train_indeks,]
train_x <- train %>% dplyr::select(-y)
train_y <- train$y
test_x <- test %>% dplyr::select(-y)
test_y <- test$y
training <- data.frame(train_x, y = train_y)
set.seed(123)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE, # FALSE for reproducible results
)
xgb_base <- caret::train(
y~., data = train,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
confusionMatrix(factor(predict(xgb_base, test_x)), factor(test_y), positive = "yes")
confusionMatrix(factor(predict(xgb_base, train_x)), factor(train_y), positive = "yes")
# note to start nrounds from 200, as smaller learning rates result in errors so
# big with lower starting points that they'll mess the scales
nrounds <- 1000
tune_grid <- expand.grid(
nrounds = seq(from = 200, to = nrounds, by = 50),
eta = c(0.025, 0.05, 0.1, 0.3),
max_depth = c(2, 3, 4, 5, 6),
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
tune_control <- caret::trainControl(
method = "cv", # cross-validation
number = 5, # with n folds
#index = createFolds(tr_treated$Id_clean), # fix the folds
verboseIter = FALSE, # no training log
allowParallel = TRUE # FALSE for reproducible results
)
xgb_tune <- caret::train(
y~., data = train,
trControl = tune_control,
tuneGrid = tune_grid,
method = "xgbTree",
verbose = TRUE
)
asd<-readRDS("C:/Users/user/Desktop/R_Projeler/Hangikredi/Hangikredi/hsyndalgic_model.rds")
confusionMatrix(factor(predict(asd, test_x)), factor(test_y), positive = "yes")
